/**
 * NOTE: This class is auto generated by the swagger code generator program (2.2.3).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.stnetix.ariaddna.restapiserver.api;

import com.stnetix.ariaddna.restapiserver.model.CloudSetPages;
import com.stnetix.ariaddna.restapiserver.model.ErrorModel;
import java.util.UUID;
import com.stnetix.ariaddna.restapiserver.model.User;

import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import javax.validation.Valid;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2017-07-24T10:27:06.657+03:00")

@Api(value = "users", description = "the users API")
public interface UsersApi {

    @ApiOperation(value = "", notes = "Allows one to create a new user.", response = User.class, tags={ "Ariaddna", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "A new user was successfully created.", response = User.class),
        @ApiResponse(code = 409, message = "Such user already exists.", response = ErrorModel.class),
        @ApiResponse(code = 200, message = "Unexpected error.", response = ErrorModel.class) })
    
    @RequestMapping(value = "/users",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<User> addUser(@ApiParam(value = "A new User-object containing all specific information that makes user profile unique." ,required=true )  @Valid @RequestBody User user);


    @ApiOperation(value = "", notes = "Changing user password.", response = Void.class, tags={ "Ariaddna", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "User updated.", response = Void.class),
        @ApiResponse(code = 404, message = "User not found.", response = ErrorModel.class),
        @ApiResponse(code = 200, message = "Unexpected error.", response = ErrorModel.class) })
    
    @RequestMapping(value = "/users/{userUuid}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> changeUserPassword(@ApiParam(value = "UUID of user to fetch.",required=true ) @PathVariable("userUuid") String userUuid,@ApiParam(value = "Changed user." ,required=true )  @Valid @RequestBody User user);


    @ApiOperation(value = "", notes = "Deleting user.", response = Void.class, tags={ "Ariaddna", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "User deleted.", response = Void.class),
        @ApiResponse(code = 404, message = "User not found.", response = ErrorModel.class),
        @ApiResponse(code = 200, message = "Unexpected error.", response = ErrorModel.class) })
    
    @RequestMapping(value = "/users/{userUuid}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteUser(@ApiParam(value = "UUID of user to delete.",required=true ) @PathVariable("userUuid") String userUuid);


    @ApiOperation(value = "", notes = "This operation allows one to get back information about certain user providing his UUID as a path parameter.", response = User.class, tags={ "Ariaddna", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "The user was found.", response = User.class),
        @ApiResponse(code = 404, message = "The user was not found.", response = ErrorModel.class),
        @ApiResponse(code = 200, message = "Unexpected error.", response = ErrorModel.class) })
    
    @RequestMapping(value = "/users/{userUuid}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<User> findUserByUuid(@ApiParam(value = "The UUID of a user to fetch.",required=true ) @PathVariable("userUuid") UUID userUuid);


    @ApiOperation(value = "", notes = "Returns a list of clouds which a certain user has connected to his ariADDna account.", response = CloudSetPages.class, tags={ "Ariaddna", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "The user's accounts were found.", response = CloudSetPages.class),
        @ApiResponse(code = 404, message = "User does not exist.", response = ErrorModel.class),
        @ApiResponse(code = 200, message = "Unexpected error.", response = ErrorModel.class) })
    
    @RequestMapping(value = "/users/{userUuid}/clouds",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<CloudSetPages> getExternalCloudAccounts(@ApiParam(value = "Providing user's UUID one can access his CloudSet and add retrieve the list of available external cloud accounts.",required=true ) @PathVariable("userUuid") UUID userUuid);

}
