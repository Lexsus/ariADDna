swagger: '2.0'

info:
  title: ariADDna API
  description: |
   #### This document contains the API description for ariADDna project.
   Using this API one can manage all available cloud services (DropBox, GDrive, Yandex.Disk etc.) from single point.
  contact:
    name: API Support
    url: http://www.ariaddna.stnetix.com/support
    email: ariaddna.support@stnetix.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: "1.0"

host: api.ariaddna.stnetix.com
basePath: /v1
schemes:
  - https

consumes:
  - application/json
produces:
  - application/json

paths:
  /users:
  #Create a new user.
    post:
      description: Allows one to create a new user.
      operationId: addUser
      parameters:
        - in: body
          name: user
          description: A new User-object containing all specific information that makes user profile unique.
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        '201':
          description: A new user was successfully created.
          schema:
            $ref: '#/definitions/User'
        '409':
          description: Such user already exists.
          schema:
            $ref: '#/definitions/ErrorModel'
        default:
          description: Unexpected error.
          schema:
            $ref: '#/definitions/ErrorModel'

  /users/{userUuid}:
  #Get user by UUID
    get:
      description: This operation allows one to get back information about certain user providing his UUID as a path parameter.
      operationId: findUserByUuid
      parameters:
        - name: userUuid
          in: path
          description: The UUID of a user to fetch.
          required: true
          type: string
          format: uuid
      responses:
        '200':
          description: The user was found.
          schema:
            $ref: '#/definitions/User'
        '404':
          description: The user was not found.
          schema:
            $ref: '#/definitions/ErrorModel'
        default:
          description: Unexpected error.
          schema:
            $ref: '#/definitions/ErrorModel'

  #Change user password.
    put:
      description: Changing user password.
      operationId: changeUserPassword
      parameters:
        - name: userUuid
          in: path
          description: UUID of user to fetch.
          required: true
          type: string
        - name: user
          in: body
          description: Changed user.
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        '204':
          description: User updated.
        '404':
          description: User not found.
          schema:
            $ref: '#/definitions/ErrorModel'
        default:
          description: Unexpected error.
          schema:
            $ref: '#/definitions/ErrorModel'

  #Delete user by UUID.
    delete:
      description: Deleting user.
      operationId: deleteUser
      parameters:
        - name: userUuid
          in: path
          description: UUID of user to delete.
          type: string
          required: true
      responses:
        '200':
           description: User deleted.
        '404':
           description: User not found.
           schema:
             $ref: '#/definitions/ErrorModel'
        default:
           description: Unexpected error.
           schema:
             $ref: '#/definitions/ErrorModel'

  /users/{userUuid}/clouds:
    get:
      description: Returns a list of clouds which a certain user has connected to his ariADDna account.
      operationId: getExternalCloudAccounts
      parameters:
        - in: path
          name: userUuid
          description: Providing user's UUID one can access his CloudSet and add retrieve the list of available external cloud accounts.
          type: string
          format: uuid
          required: true
      responses:
        '200':
          description: The user's accounts were found.
          schema:
            $ref: '#/definitions/CloudSetPages'
        '404':
          description: User does not exist.
          schema:
            $ref: '#/definitions/ErrorModel'
        default:
           description: Unexpected error.
           schema:
             $ref: '#/definitions/ErrorModel'

  /auth:
  #Create new user session.
    post:
      description: Creating new user session.
      operationId: authUser
      parameters:
        - name: user
          in: body
          description: Authorization user credential.
          required: true
          schema:
            $ref: "#/definitions/Credential"
      responses:
        '201':
          description: User session.
          schema:
            $ref: '#/definitions/Session'
        '409':
          description: User not found on server.
          schema:
            $ref: '#/definitions/ErrorModel'
        default:
          description: Unexpected error.
          schema:
            $ref: '#/definitions/ErrorModel'

  /auth/{uuid}:
  #Logout user.
    put:
      description: Closing user session.
      operationId: logoutSession
      parameters:
        - name: uuid
          in: path
          description: UUID of user session.
          required: true
          type: string
      responses:
        '204':
          description: Sesson closed.
        '404':
          description: Session not found.
          schema:
            $ref: '#/definitions/ErrorModel'
        default:
          description: Unexpected error.
          schema:
            $ref: '#/definitions/ErrorModel'

  /clouds:
    post:
      description: Allows one to add an external cloud account to an existing ariADDna's user. The User MUST be already registered at the cloud service to be added.
      operationId: addExternalCloudAccount
      parameters:
        - in: body
          name: cloud
          description: A required information about an external cloud service that a user wants to include to his ariADDna.
          schema:
           $ref: '#/definitions/Cloud'
      responses:
        '201':
          description: New cloud account was added successfully.
          schema:
            $ref: '#/definitions/Cloud'
        '409':
          description: This cloud account already exists.
          schema:
            $ref: '#/definitions/ErrorModel'
        default:
          description: Unexpected error.
          schema:
            $ref: '#/definitions/ErrorModel'

  /clouds/{cloudUuid}:
    delete:
      description: Allows to delete user's external cloud account.
      operationId: deleteExternalCloudAccount
      parameters:
        - in: path
          name: cloudUuid
          description: An external cloud identifier which user has inside his profile. Allows to delete external cloud profile.
          required: true
          type: string
          format: uuid
      responses:
        '204':
          description: The cloud account was deleted.
          schema:
            type: string
            format: uuid
        '404':
          description: The specified cloud account was not found.

  /vufs/snap/{userUuid}:
    get:
      description: Allows to get snapshot vufs.
      operationId: getVUFS
      parameters:
        - in: path
          name: userUuid
          description: Current user UUID.
          required: true
          type: string
          format: uuid
      responses:
        '200':
          description: VUFS snapshot of current user.
          schema:
            $ref: "#/definitions/Vufs"
        '404':
          description: Bad user UUID.
          schema:
            $ref: '#/definitions/ErrorModel'
        default:
          description: Unexpected error.
          schema:
            $ref: '#/definitions/ErrorModel'

  /vufs/snap/diff/{userUuid}/{lastCreationTime}:
    get:
      description: Allows to get difference of previous snapshot and actual.
      operationId: getDiffVUFS
      parameters:
        - in: path
          name: userUuid
          description: Current user UUID.
          required: true
          type: string
          format: uuid
        - in: path
          name: lastCreationTime
          description: Parametr fromDateTime of current VUFS snapshot
          required: true
          type: string
          format: date-time
      responses:
        '200':
          description: Difference VUFS snapshot of current user.
          schema:
            $ref: "#/definitions/Vufs"
        '404':
          description: Bad user UUID.
          schema:
            $ref: '#/definitions/ErrorModel'
        default:
          description: Unexpected error.
          schema:
            $ref: '#/definitions/ErrorModel'

  /vufs/snap/diff/{userUuid}:
    post:
      description: Allows to send changes in local file storage to server with empty Allocation model and as response get Vufs object with Allocation model.
      operationId: sendChangesInLFS
      parameters:
        - in: body
          name: localChanges
          description: VUFS snapshot typed object with changed in local file storage with empty Allocation model.
          required: true
          schema:
           $ref: '#/definitions/Vufs'
        - in: path
          name: userUuid
          description: Current user UUID.
          required: true
          type: string
          format: uuid
      responses:
        '201':
          description: Checked snapshot changes.
          schema:
           $ref: '#/definitions/Vufs'
        '409':
          description: Changes was not found in clouds.
          schema:
            $ref: '#/definitions/ErrorModel'
        default:
          description: Unexpected error.
          schema:
            $ref: '#/definitions/ErrorModel'

  /vufs/space/{userUuid}:
    get:
      description: Allows to get availability space on each cloud.
      operationId: getUserAvailableSpase
      parameters:
        - in: path
          name: userUuid
          description: User UUID.
          required: true
          type: string
          format: uuid
      responses:
        '200':
          description: Clouds availability space.
          schema:
            $ref: "#/definitions/CloudSpaseSet"
        '404':
          description: Bad user UUID.
          schema:
            $ref: '#/definitions/ErrorModel'
        default:
          description: Unexpected error.
          schema:
            $ref: '#/definitions/ErrorModel'

  /vufs/allocation:
    post:
      description: Allows to post file allocate strategy from client to server.
      operationId: postAllocateModel
      parameters:
        - in: body
          name: allocateModel
          description: File allocate strategy.
          required: true
          schema:
           $ref: '#/definitions/AllocateModel'
      responses:
        '201':
          description: Allocate strategy was send to server. As respose - difference VUFS object.
          schema:
           $ref: '#/definitions/Vufs'
        default:
          description: Unexpected error.
          schema:
            $ref: '#/definitions/ErrorModel'

  /stat/vufs/{userUuid}:
    post:
      description: Allows to post statistic from client to server about clouds.
      operationId: postCloudStatSet
      parameters:
        - in: path
          name: userUuid
          description: User UUID.
          type: string
          required: true
          format: uuid
        - in: body
          name: cloudStatisticSet
          description: Cloud statistic set typed object.
          required: true
          schema:
           $ref: '#/definitions/StatisticSet'
      responses:
        '201':
          description: Statistics was send to server.
        default:
          description: Unexpected error.
          schema:
            $ref: '#/definitions/ErrorModel'

    get:
      description: Allows to get statistic object about clouds.
      operationId: getCloudStatisticSet
      parameters:
        - in: path
          name: userUuid
          description: User UUID.
          required: true
          type: string
          format: uuid
      responses:
        '200':
          description: Clouds statistic.
          schema:
            $ref: "#/definitions/StatisticSet"
        '404':
          description: Bad cloud UUID.
          schema:
            $ref: '#/definitions/ErrorModel'
        default:
          description: Unexpected error.
          schema:
            $ref: '#/definitions/ErrorModel'

  /stat/vufs/helth/{userUuid}:
    get:
      description: Allows to get helth-check statistic about users Clouds.
      operationId: getHelthCheckStat
      parameters:
        - in: path
          name: userUuid
          description: User UUID.
          required: true
          type: string
          format: uuid
      responses:
        '200':
          description: Clouds helth-check statistic.
          schema:
            $ref: "#/definitions/HelthStatistis"
        '404':
          description: Bad user UUID.
          schema:
            $ref: '#/definitions/ErrorModel'
        default:
          description: Unexpected error.
          schema:
            $ref: '#/definitions/ErrorModel'

definitions:
#Here are the completed definitions.
  User:
    type: object
    description: User of service.
    properties:
      uuid:
        description: UUID of a user at arriADDna server.
        type: string
        format: uuid
      userCredential:
        description: User's credential.
        $ref: "#/definitions/Credential"
      nickname:
        type: string
        description: User's nickname.
      email:
        type: string
        description: User's e-mail.
      externalClouds:
        description: The set of external cloud accounts that user has at ariADDna server.
        type: object
        $ref: "#/definitions/CloudSet"

  Credential:
    type: object
    description: Credential for a basic user/password authentication.
    properties:
      user:
        type: string
        description: User's login.
      password:
        type: string
        description: A password associated with the login.
        format: password

  Session:
    description: User's session object.
    type: object
    properties:
      user:
        description: Authorizated user.
        $ref: '#/definitions/User'
      uuid:
        description: UUID of user's session at arriADDna server.
        type: string
        format: uuid
      loginTime:
        description: Time of creation of user's session.
        type: string
        format: date-time

  Cloud:
    description: A representation of an external cloud object.
    type: object
    properties:
      uuid:
        description: UUID of an external cloud.
        type: string
      cloudUrl:
        description: A base URL of an external cloud for file managment.
        type: string
      cloudType:
        description: Enumeration of all cloud services with which ariADDna can interact.
        enum:
          - GOOGLE_DRIVE
          - YANDEX_DISK
          - DROPBOX
      cloudAccessToken:
        description: The token which allows ariADDna service action at an external cloud service on behalf of a user.
        $ref: '#/definitions/CloudAccessToken'
      connectionState:
        description: Enumeration of certain connection states to an external cloud service.
        enum:
          - CONNECTED
          - DISCONNECTED
          - IN_PROGRESS
          - TERMINATED
      login:
        description: A login name for an external cloud service where a user is already registered.
        type: string
      password:
        description: A password for access to be granted.
        type: string
    required:
      - cloudType
      - cloudUrl
      - cloudAccessToken

  CloudSet:
    description: A representation of a cloud list that user has.
    type: array
    items:
      $ref: '#/definitions/Cloud'

  CloudSetPages:
    description: This page-object shall be used for visual representation of a list (which is inside a CloudSet) of user's external cloud accounts.
    properties:
      offset:
        type: integer
        description: Offset of the first entry.
      limit:
        type: integer
        description: Quantity of entries to show.
      entries:
        $ref: '#/definitions/CloudSet'

  CloudAccessToken:
    description: Stands for an external cloud access token. For more info see https://tools.ietf.org/html/draft-ietf-oauth-v2-31.
    type: object
    properties:
      accessToken:
        description: A token recieved during OAuth authorization.
        type: string
      expiresIn:
        description: The life-time in seconds of the access token.
        type: integer
      refreshToken:
        description: If an accessToken has a limited life-time a user will need to pass authorization manualy again. To prevent this a refreshToken should be returned togeather with an accessToken. Thus having a refresh token and passing it inside HTTP-request ariADDna service will be able to get new accessToken without user participation.
        type: string
      tokenType:
        description: OPTIONAL. The access token type provides the client with the information required to successfully utilize the access token to make a protected resource request (along with type-specific attributes).  The client MUST NOT use an access token if it does not understand the token type. For example Yandex.Disk whats the tokenType to be "bearer".
        type: string
    required:
      - accessToken

  Vufs:
    description: Describes shapshot VUFS of user.
    type: object
    properties:
      uuid:
        description: VUFS shapshot UUID.
        type: string
        format: uuid
      fromDateTime:
        description: Created date of snapshot.
        type: string
        format: date-time
      toDateTime:
        description: Deactivation date of snapshot.
        type: string
        format: date-time
      owner:
        description: Owner of this snapshot.
        $ref: '#/definitions/User'
      vufsFileSet:
        type: array
        items:
          $ref: "#/definitions/VufsFile"

  VufsFile:
    description: Describes virtual file in VUFS.
    type: object
    properties:
      uuid:
        type: string
        description: Virtual file UUID.
        format: uuid
      file-properties:
        type: array
        items:
          $ref: "#/definitions/Property"
      file-parts:
        type: array
        items:
          $ref: "#/definitions/PartLocation"
      childSet:
        type: array
        items:
          $ref: "#/definitions/VufsFile"
      allocateModel:
        $ref: "#/definitions/AllocationModel"

  Property:
    description: Describes all file property.
    type: object
    properties:
      uuid:
        type: string
        description: Property UUID.
        format: uuid
      property-name:
        type: string
        description: Property name.
      property-value:
        type: string
        description: Property value.

  PartLocation:
    description: Describes sequence number of file part and its location.
    type: object
    properties:
      uuid:
        type: string
        description: PartLocation UUID.
        format: uuid
      number:
        type: integer
        format: int32
        description: Sequence number.
      location:
        $ref: "#/definitions/Cloud"

  AllocationModel:
    description: Describes allocate storage model ot file.
    type: object
    properties:
      uuid:
        type: string
        description: Allocation model UUID.
        format: uuid
      modelType:
        description: Types of allocation model.
        enum:
          - UNION
          - MIRROR
          - HIGH_AVAILABILITY
      propertySet:
        type: array
        items:
          $ref: "#/definitions/Property"

  StatisticSet:
    type: object
    description: Contain set of statistic information about cloud.
    properties:
      statisticSet:
        type: array
        items:
          $ref: "#/definitions/Statistic"

  Statistic:
    type: object
    description: Contain statistic information about cloud.
    properties:
      uuid:
        type: string
        description: Statistic UUID.
        format: uuid
      cloud:
        $ref: "#/definitions/Cloud"
      uploadFiles:
        description: Count of uploaded files.
        type: integer
        format: int32
      uploadTime:
        description: Time what files was uploaded.
        type: integer
        format: int64
      downloadFiles:
        description: Count of downloaded files.
        type: integer
        format: int32
      downloadTimes:
        description: Time what files was downloaded.
        type: integer
        format: int64

  HelthStatistis:
    type: object
    description: Contain helth-check statistic information about set of clouds.
    properties:
      uuid:
        type: string
        description: HelthStatistis UUID.
        format: uuid
      helthCloudSet:
        type: array
        items:
          $ref: "#/definitions/HelthCloud"

  HelthCloud:
    type: object
    description:  Contain key-value information about cloud and its helth status.
    properties:
      cloud:
        $ref: "#/definitions/Cloud"
      isAvailable:
        description: Is cloud available?
        type: boolean

  CloudSpaseSet:
    type: object
    description: Contain set of information about clouds availability space.
    properties:
      uuid:
        type: string
        description: CloudSpaseSet UUID.
        format: uuid
      cloudSpaceSet:
        type: array
        items:
          $ref: "#/definitions/CloudSpase"

  CloudSpase:
    type: object
    description: Contain information about cloud availability space.
    properties:
      uuid:
        type: string
        description: CloudSpase UUID.
        format: uuid
      cloud:
        $ref: "#/definitions/Cloud"
      availableSpace:
        description: Cloud available spase in bytes.
        type: integer
        format: int64

  AllocateModel:
    type: object
    description: Contain information about file allocate stategy.
    properties:
      uuid:
        type: string
        description: AllocateModel UUID.
        format: uuid
      file:
        $ref: "#/definitions/VufsFile"
      allocateModel:
        $ref: "#/definitions/AllocationModel"

  ErrorModel:
    description: Information about error.
    type: object
    properties:
      code:
        description: Contains error code massage.
        type: integer
        format: int32
      message:
        description: Contains short error message.
        type: string

#Below all the items are just stubs.
