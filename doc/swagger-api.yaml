swagger: '2.0'

# Document metadata
info:
  title: ariADDna API
  description: |
   #### This document contains the API for ariADDna project.
   Using this API one can manage all available cloud services (DropBox, GDrive, Yandex.Disk etc.) from single point.

  contact:
    name: API Support
    url: http://www.ariaddna.stnetix.com/support
    email: ariaddna.support@stnetix.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: "1.0"

host: api.ariaddna.stnetix.com
basePath: /v1
schemes:
  - https

consumes:
  - application/json
produces:
  - application/json

paths:
  /clouds:
    post:
      # THE PROBLEM: we need to send an existing User and a new Cloud for him. How should we link togeather User and Cloud in the parameters???
      description: Allows one to add an external cloud account to an existing ariADDna's user. The User MUST be already registered at the cloud service to be added.
      operationId: addExternalCloudAccount
      parameters:
        - in: body
          name: cloud
          schema:
           $ref: '#/definitions/Cloud'
      responses:
        '201':
          description: New account was added successfully.
          #It's a bad schema idea... What do we expect to get back?
          schema:
            $ref: '#/definitions/Cloud'

    get:
      description: Returns a list of clouds which a certain user has connected to his ariADDna account.
      operationId: getExternalCloudsList
      parameters:
        - in: body
          name: user
          schema:
            $ref: '#/definitions/User'
      responses:
        '200':
          description: The list was found.
          #Again here schema is just a stub. I don't know how to represent a list of clouds in the response body.
          schema:
            type: array
            items:
              $ref: '#/definitions/Cloud'

  #I see to ways: passing cloud uuid as PathParameter or in header/body. In the last case we don't need path /clouds/{cloudUuid}
  /clouds/{cloudUuid}:
    delete:
      description: Allows to delete user's external cloud account.
      operationId: deleteExternalCloud
      parameters:
        - in: path
          name: cloudUuid
          required: true
          type: string
      responses:
        '204':
          description: The cloud account was deleted.

definitions:
  #Here are the completed definitions.
  Cloud:
    description: A representation of an external cloud object.
    type: object
    properties:
      uuid:
        type: string
      cloudUrl:
        type: string
      cloudType:
        enum:
          - GOOGLE_DRIVE
          - YANDEX_DISK
          - DROPBOX
      cloudAccessToken:
        $ref: '#/definitions/CloudAccessToken'
      connectionState:
        enum:
          - CONNECTED
          - DISCONNECTED
          - IN_PROGRESS
          - TERMINATED
      login:
        type: string
      password:
        type: string
    required:
      - cloudType
      - cloudUrl
      - cloudAccessToken

  CloudAccessToken:
    description: Stands for an external cloud access token.
    type: object
    properties:
      accessToken:
        type: string
      expiresIn:
        type: integer
      refreshToken:
        type: string
      rawInfo:
        type: string
    required:
      - accessToken
  #Here and after all these items are just a stubs.
  User:
    type: string