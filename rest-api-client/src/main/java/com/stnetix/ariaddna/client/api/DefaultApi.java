/*
 * ariADDna API
 * #### This document contains the API description for ariADDna project. Using this API one can manage all available cloud services (DropBox, GDrive, Yandex.Disk etc.) from single point. 
 *
 * OpenAPI spec version: 1.0
 * Contact: ariaddna.support@stnetix.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.stnetix.ariaddna.client.api;

import com.stnetix.ariaddna.client.ApiCallback;
import com.stnetix.ariaddna.client.ApiException;
import com.stnetix.ariaddna.client.Configuration;
import com.stnetix.ariaddna.client.ProgressRequestBody;
import com.stnetix.ariaddna.client.model.CloudSetPages;
import com.stnetix.ariaddna.client.model.InitialAllocationModel;
import com.stnetix.ariaddna.client.model.StatisticSet;
import com.stnetix.ariaddna.client.model.Vufs;
import com.stnetix.ariaddna.client.ApiClient;
import com.stnetix.ariaddna.client.ApiResponse;
import com.stnetix.ariaddna.client.Pair;
import com.stnetix.ariaddna.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.stnetix.ariaddna.client.model.Cloud;
import com.stnetix.ariaddna.client.model.Credential;
import com.stnetix.ariaddna.client.model.Session;
import com.stnetix.ariaddna.client.model.User;
import com.stnetix.ariaddna.commonutils.logger.AriaddnaLogger;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient apiClient;

    private static final AriaddnaLogger LOGGER = AriaddnaLogger.getLogger(DefaultApi.class);

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for addExternalCloudAccount */
    private com.squareup.okhttp.Call addExternalCloudAccountCall(Cloud cloud, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = cloud;
        
        // create path and map variables
        String localVarPath = "/clouds".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addExternalCloudAccountValidateBeforeCall(Cloud cloud, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = addExternalCloudAccountCall(cloud, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Allows one to add an external cloud account to an existing ariADDna&#39;s user. The User MUST be already registered at the cloud service to be added.
     * @param cloud A required information about an external cloud service that a user wants to include to his ariADDna. (optional)
     * @return Cloud
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Cloud addExternalCloudAccount(Cloud cloud) throws ApiException {
        ApiResponse<Cloud> resp = addExternalCloudAccountWithHttpInfo(cloud);
        LOGGER.info("Method {addExternalCloudAccount} was called, response code is {}", resp.getStatusCode());
        return resp.getData();
    }

    /**
     * 
     * Allows one to add an external cloud account to an existing ariADDna&#39;s user. The User MUST be already registered at the cloud service to be added.
     * @param cloud A required information about an external cloud service that a user wants to include to his ariADDna. (optional)
     * @return ApiResponse&lt;Cloud&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Cloud> addExternalCloudAccountWithHttpInfo(Cloud cloud) throws ApiException {
        com.squareup.okhttp.Call call = addExternalCloudAccountValidateBeforeCall(cloud, null, null);
        Type localVarReturnType = new TypeToken<Cloud>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Allows one to add an external cloud account to an existing ariADDna&#39;s user. The User MUST be already registered at the cloud service to be added.
     * @param cloud A required information about an external cloud service that a user wants to include to his ariADDna. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addExternalCloudAccountAsync(Cloud cloud, final ApiCallback<Cloud> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addExternalCloudAccountValidateBeforeCall(cloud, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Cloud>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for addUser */
    private com.squareup.okhttp.Call addUserCall(User user, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = user;
        
        // create path and map variables
        String localVarPath = "/users".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addUserValidateBeforeCall(User user, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'user' is set
        if (user == null) {
            throw new ApiException("Missing the required parameter 'user' when calling addUser(Async)");
        }
        
        
        com.squareup.okhttp.Call call = addUserCall(user, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Allows one to create a new user.
     * @param user A new User-object containing all specific information that makes user profile unique. (required)
     * @return User
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public User addUser(User user) throws ApiException {
        ApiResponse<User> resp = addUserWithHttpInfo(user);
        LOGGER.info("Method {addUser} was called, response code is {}", resp.getStatusCode());
        return resp.getData();
    }

    /**
     * 
     * Allows one to create a new user.
     * @param user A new User-object containing all specific information that makes user profile unique. (required)
     * @return ApiResponse&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<User> addUserWithHttpInfo(User user) throws ApiException {
        com.squareup.okhttp.Call call = addUserValidateBeforeCall(user, null, null);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Allows one to create a new user.
     * @param user A new User-object containing all specific information that makes user profile unique. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addUserAsync(User user, final ApiCallback<User> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addUserValidateBeforeCall(user, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for authUser */
    private com.squareup.okhttp.Call authUserCall(Credential user, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = user;
        
        // create path and map variables
        String localVarPath = "/auth".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call authUserValidateBeforeCall(Credential user, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'user' is set
        if (user == null) {
            throw new ApiException("Missing the required parameter 'user' when calling authUser(Async)");
        }
        
        
        com.squareup.okhttp.Call call = authUserCall(user, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Creating new user session.
     * @param user Authorization user credential. (required)
     * @return Session
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Session authUser(Credential user) throws ApiException {
        ApiResponse<Session> resp = authUserWithHttpInfo(user);
        LOGGER.info("Method {authUser} was called, response code is {}", resp.getStatusCode());
        return resp.getData();
    }

    /**
     * 
     * Creating new user session.
     * @param user Authorization user credential. (required)
     * @return ApiResponse&lt;Session&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Session> authUserWithHttpInfo(Credential user) throws ApiException {
        com.squareup.okhttp.Call call = authUserValidateBeforeCall(user, null, null);
        Type localVarReturnType = new TypeToken<Session>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creating new user session.
     * @param user Authorization user credential. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call authUserAsync(Credential user, final ApiCallback<Session> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = authUserValidateBeforeCall(user, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Session>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for changeUserPassword */
    private com.squareup.okhttp.Call changeUserPasswordCall(String userUuid, User user, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = user;
        
        // create path and map variables
        String localVarPath = "/users/{userUuid}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "userUuid" + "\\}", apiClient.escapeString(userUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call changeUserPasswordValidateBeforeCall(String userUuid, User user, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'userUuid' is set
        if (userUuid == null) {
            throw new ApiException("Missing the required parameter 'userUuid' when calling changeUserPassword(Async)");
        }
        
        // verify the required parameter 'user' is set
        if (user == null) {
            throw new ApiException("Missing the required parameter 'user' when calling changeUserPassword(Async)");
        }
        
        
        com.squareup.okhttp.Call call = changeUserPasswordCall(userUuid, user, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Changing user password.
     * @param userUuid UUID of user to fetch. (required)
     * @param user Changed user. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void changeUserPassword(String userUuid, User user) throws ApiException {
        changeUserPasswordWithHttpInfo(userUuid, user);
    }

    /**
     * 
     * Changing user password.
     * @param userUuid UUID of user to fetch. (required)
     * @param user Changed user. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> changeUserPasswordWithHttpInfo(String userUuid, User user) throws ApiException {
        com.squareup.okhttp.Call call = changeUserPasswordValidateBeforeCall(userUuid, user, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Changing user password.
     * @param userUuid UUID of user to fetch. (required)
     * @param user Changed user. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call changeUserPasswordAsync(String userUuid, User user, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = changeUserPasswordValidateBeforeCall(userUuid, user, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for deleteExternalCloudAccount */
    private com.squareup.okhttp.Call deleteExternalCloudAccountCall(String cloudUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/clouds/{cloudUuid}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "cloudUuid" + "\\}", apiClient.escapeString(cloudUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteExternalCloudAccountValidateBeforeCall(String cloudUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'cloudUuid' is set
        if (cloudUuid == null) {
            throw new ApiException("Missing the required parameter 'cloudUuid' when calling deleteExternalCloudAccount(Async)");
        }
        
        
        com.squareup.okhttp.Call call = deleteExternalCloudAccountCall(cloudUuid, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Allows to delete user&#39;s external cloud account.
     * @param cloudUuid An external cloud identifier which user has inside his profile. Allows to delete external cloud profile. (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String deleteExternalCloudAccount(String cloudUuid) throws ApiException {
        ApiResponse<String> resp = deleteExternalCloudAccountWithHttpInfo(cloudUuid);
        LOGGER.info("Method {deleteExternalCloudAccount} was called, response code is {}", resp.getStatusCode());
        return resp.getData();
    }

    /**
     * 
     * Allows to delete user&#39;s external cloud account.
     * @param cloudUuid An external cloud identifier which user has inside his profile. Allows to delete external cloud profile. (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> deleteExternalCloudAccountWithHttpInfo(String cloudUuid) throws ApiException {
        com.squareup.okhttp.Call call = deleteExternalCloudAccountValidateBeforeCall(cloudUuid, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Allows to delete user&#39;s external cloud account.
     * @param cloudUuid An external cloud identifier which user has inside his profile. Allows to delete external cloud profile. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteExternalCloudAccountAsync(String cloudUuid, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteExternalCloudAccountValidateBeforeCall(cloudUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for deleteUser */
    private com.squareup.okhttp.Call deleteUserCall(String userUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/users/{userUuid}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "userUuid" + "\\}", apiClient.escapeString(userUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteUserValidateBeforeCall(String userUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'userUuid' is set
        if (userUuid == null) {
            throw new ApiException("Missing the required parameter 'userUuid' when calling deleteUser(Async)");
        }
        
        
        com.squareup.okhttp.Call call = deleteUserCall(userUuid, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Deleting user.
     * @param userUuid UUID of user to delete. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteUser(String userUuid) throws ApiException {
        deleteUserWithHttpInfo(userUuid);
    }

    /**
     * 
     * Deleting user.
     * @param userUuid UUID of user to delete. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteUserWithHttpInfo(String userUuid) throws ApiException {
        com.squareup.okhttp.Call call = deleteUserValidateBeforeCall(userUuid, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Deleting user.
     * @param userUuid UUID of user to delete. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteUserAsync(String userUuid, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteUserValidateBeforeCall(userUuid, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for findUserByUuid */
    private com.squareup.okhttp.Call findUserByUuidCall(String userUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/users/{userUuid}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "userUuid" + "\\}", apiClient.escapeString(userUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call findUserByUuidValidateBeforeCall(String userUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'userUuid' is set
        if (userUuid == null) {
            throw new ApiException("Missing the required parameter 'userUuid' when calling findUserByUuid(Async)");
        }
        
        
        com.squareup.okhttp.Call call = findUserByUuidCall(userUuid, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * This operation allows one to get back information about certain user providing his UUID as a path parameter.
     * @param userUuid The UUID of a user to fetch. (required)
     * @return User
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public User findUserByUuid(String userUuid) throws ApiException {
        ApiResponse<User> resp = findUserByUuidWithHttpInfo(userUuid);
        LOGGER.info("Method {findUserByUuid} was called, response code is {}", resp.getStatusCode());
        return resp.getData();
    }

    /**
     * 
     * This operation allows one to get back information about certain user providing his UUID as a path parameter.
     * @param userUuid The UUID of a user to fetch. (required)
     * @return ApiResponse&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<User> findUserByUuidWithHttpInfo(String userUuid) throws ApiException {
        com.squareup.okhttp.Call call = findUserByUuidValidateBeforeCall(userUuid, null, null);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This operation allows one to get back information about certain user providing his UUID as a path parameter.
     * @param userUuid The UUID of a user to fetch. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call findUserByUuidAsync(String userUuid, final ApiCallback<User> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = findUserByUuidValidateBeforeCall(userUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getCloudStatisticSet */
    private com.squareup.okhttp.Call getCloudStatisticSetCall(String userUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/stat/vufs/{userUuid}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "userUuid" + "\\}", apiClient.escapeString(userUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCloudStatisticSetValidateBeforeCall(String userUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'userUuid' is set
        if (userUuid == null) {
            throw new ApiException("Missing the required parameter 'userUuid' when calling getCloudStatisticSet(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getCloudStatisticSetCall(userUuid, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Allows to get statistic object about clouds.
     * @param userUuid User UUID. (required)
     * @return StatisticSet
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StatisticSet getCloudStatisticSet(String userUuid) throws ApiException {
        ApiResponse<StatisticSet> resp = getCloudStatisticSetWithHttpInfo(userUuid);
        LOGGER.info("Method {getCloudStatisticSet} was called, response code is {}", resp.getStatusCode());
        return resp.getData();
    }

    /**
     * 
     * Allows to get statistic object about clouds.
     * @param userUuid User UUID. (required)
     * @return ApiResponse&lt;StatisticSet&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<StatisticSet> getCloudStatisticSetWithHttpInfo(String userUuid) throws ApiException {
        com.squareup.okhttp.Call call = getCloudStatisticSetValidateBeforeCall(userUuid, null, null);
        Type localVarReturnType = new TypeToken<StatisticSet>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Allows to get statistic object about clouds.
     * @param userUuid User UUID. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCloudStatisticSetAsync(String userUuid, final ApiCallback<StatisticSet> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCloudStatisticSetValidateBeforeCall(userUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<StatisticSet>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getDiffVUFS */
    private com.squareup.okhttp.Call getDiffVUFSCall(String userUuid, Long dateTime, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/vufs/snap/diff/{userUuid}/{dateTime}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "userUuid" + "\\}", apiClient.escapeString(userUuid.toString()))
        .replaceAll("\\{" + "dateTime" + "\\}", apiClient.escapeString(dateTime.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDiffVUFSValidateBeforeCall(String userUuid, Long dateTime, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'userUuid' is set
        if (userUuid == null) {
            throw new ApiException("Missing the required parameter 'userUuid' when calling getDiffVUFS(Async)");
        }
        
        // verify the required parameter 'dateTime' is set
        if (dateTime == null) {
            throw new ApiException("Missing the required parameter 'dateTime' when calling getDiffVUFS(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getDiffVUFSCall(userUuid, dateTime, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Allows to get difference of previous snapshot and actual.
     * @param userUuid Current user UUID. (required)
     * @param dateTime FromDateTime of current VUFS snapshot (required)
     * @return Vufs
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Vufs getDiffVUFS(String userUuid, Long dateTime) throws ApiException {
        ApiResponse<Vufs> resp = getDiffVUFSWithHttpInfo(userUuid, dateTime);
        return resp.getData();
    }

    /**
     * 
     * Allows to get difference of previous snapshot and actual.
     * @param userUuid Current user UUID. (required)
     * @param dateTime FromDateTime of current VUFS snapshot (required)
     * @return ApiResponse&lt;Vufs&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Vufs> getDiffVUFSWithHttpInfo(String userUuid, Long dateTime) throws ApiException {
        com.squareup.okhttp.Call call = getDiffVUFSValidateBeforeCall(userUuid, dateTime, null, null);
        Type localVarReturnType = new TypeToken<Vufs>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Allows to get difference of previous snapshot and actual.
     * @param userUuid Current user UUID. (required)
     * @param dateTime FromDateTime of current VUFS snapshot (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDiffVUFSAsync(String userUuid, Long dateTime, final ApiCallback<Vufs> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDiffVUFSValidateBeforeCall(userUuid, dateTime, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Vufs>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getExternalCloudAccounts */
    private com.squareup.okhttp.Call getExternalCloudAccountsCall(String userUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/users/{userUuid}/clouds".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "userUuid" + "\\}", apiClient.escapeString(userUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getExternalCloudAccountsValidateBeforeCall(String userUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'userUuid' is set
        if (userUuid == null) {
            throw new ApiException("Missing the required parameter 'userUuid' when calling getExternalCloudAccounts(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getExternalCloudAccountsCall(userUuid, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Returns a list of clouds which a certain user has connected to his ariADDna account.
     * @param userUuid Providing user&#39;s UUID one can access his CloudSet and add retrieve the list of available external cloud accounts. (required)
     * @return CloudSetPages
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CloudSetPages getExternalCloudAccounts(String userUuid) throws ApiException {
        ApiResponse<CloudSetPages> resp = getExternalCloudAccountsWithHttpInfo(userUuid);
        LOGGER.info("Method {getExternalCloudAccounts} was called, response code is {}", resp.getStatusCode());
        return resp.getData();
    }

    /**
     * 
     * Returns a list of clouds which a certain user has connected to his ariADDna account.
     * @param userUuid Providing user&#39;s UUID one can access his CloudSet and add retrieve the list of available external cloud accounts. (required)
     * @return ApiResponse&lt;CloudSetPages&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CloudSetPages> getExternalCloudAccountsWithHttpInfo(String userUuid) throws ApiException {
        com.squareup.okhttp.Call call = getExternalCloudAccountsValidateBeforeCall(userUuid, null, null);
        Type localVarReturnType = new TypeToken<CloudSetPages>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns a list of clouds which a certain user has connected to his ariADDna account.
     * @param userUuid Providing user&#39;s UUID one can access his CloudSet and add retrieve the list of available external cloud accounts. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getExternalCloudAccountsAsync(String userUuid, final ApiCallback<CloudSetPages> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getExternalCloudAccountsValidateBeforeCall(userUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CloudSetPages>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getHealthCheckStat */
    private com.squareup.okhttp.Call getHealthCheckStatCall(String userUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/stat/vufs/health/{userUuid}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "userUuid" + "\\}", apiClient.escapeString(userUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getHealthCheckStatValidateBeforeCall(String userUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'userUuid' is set
        if (userUuid == null) {
            throw new ApiException("Missing the required parameter 'userUuid' when calling getHealthCheckStat(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getHealthCheckStatCall(userUuid, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Allows to get health-check statistic about users Clouds.
     * @param userUuid User UUID. (required)
     * @return StatisticSet
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StatisticSet getHealthCheckStat(String userUuid) throws ApiException {
        ApiResponse<StatisticSet> resp = getHealthCheckStatWithHttpInfo(userUuid);
        LOGGER.info("Method {getHealthCheckStat} was called, response code is {}", resp.getStatusCode());
        return resp.getData();
    }

    /**
     * 
     * Allows to get health-check statistic about users Clouds.
     * @param userUuid User UUID. (required)
     * @return ApiResponse&lt;StatisticSet&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<StatisticSet> getHealthCheckStatWithHttpInfo(String userUuid) throws ApiException {
        com.squareup.okhttp.Call call = getHealthCheckStatValidateBeforeCall(userUuid, null, null);
        Type localVarReturnType = new TypeToken<StatisticSet>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Allows to get health-check statistic about users Clouds.
     * @param userUuid User UUID. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getHealthCheckStatAsync(String userUuid, final ApiCallback<StatisticSet> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getHealthCheckStatValidateBeforeCall(userUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<StatisticSet>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getVUFS */
    private com.squareup.okhttp.Call getVUFSCall(String userUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/vufs/snap/{userUuid}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "userUuid" + "\\}", apiClient.escapeString(userUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getVUFSValidateBeforeCall(String userUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'userUuid' is set
        if (userUuid == null) {
            throw new ApiException("Missing the required parameter 'userUuid' when calling getVUFS(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getVUFSCall(userUuid, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Allows to get snapshot vufs.
     * @param userUuid Current user UUID. (required)
     * @return Vufs
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Vufs getVUFS(String userUuid) throws ApiException {
        ApiResponse<Vufs> resp = getVUFSWithHttpInfo(userUuid);
        LOGGER.info("Method {getVUFS} was called, response code is {}", resp.getStatusCode());
        return resp.getData();
    }

    /**
     * 
     * Allows to get snapshot vufs.
     * @param userUuid Current user UUID. (required)
     * @return ApiResponse&lt;Vufs&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Vufs> getVUFSWithHttpInfo(String userUuid) throws ApiException {
        com.squareup.okhttp.Call call = getVUFSValidateBeforeCall(userUuid, null, null);
        Type localVarReturnType = new TypeToken<Vufs>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Allows to get snapshot vufs.
     * @param userUuid Current user UUID. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getVUFSAsync(String userUuid, final ApiCallback<Vufs> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getVUFSValidateBeforeCall(userUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Vufs>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for logoutSession */
    private com.squareup.okhttp.Call logoutSessionCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/auth/{uuid}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call logoutSessionValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling logoutSession(Async)");
        }
        
        
        com.squareup.okhttp.Call call = logoutSessionCall(uuid, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Closing user session.
     * @param uuid UUID of user session. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void logoutSession(String uuid) throws ApiException {
        logoutSessionWithHttpInfo(uuid);
    }

    /**
     * 
     * Closing user session.
     * @param uuid UUID of user session. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> logoutSessionWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = logoutSessionValidateBeforeCall(uuid, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Closing user session.
     * @param uuid UUID of user session. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call logoutSessionAsync(String uuid, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = logoutSessionValidateBeforeCall(uuid, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for postAllocateModel */
    private com.squareup.okhttp.Call postAllocateModelCall(String userUuid, InitialAllocationModel initialAllocationModel, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = initialAllocationModel;
        
        // create path and map variables
        String localVarPath = "/vufs/allocation/{userUuid}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "userUuid" + "\\}", apiClient.escapeString(userUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postAllocateModelValidateBeforeCall(String userUuid, InitialAllocationModel initialAllocationModel, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'userUuid' is set
        if (userUuid == null) {
            throw new ApiException("Missing the required parameter 'userUuid' when calling postAllocateModel(Async)");
        }
        
        // verify the required parameter 'initialAllocationModel' is set
        if (initialAllocationModel == null) {
            throw new ApiException("Missing the required parameter 'initialAllocationModel' when calling postAllocateModel(Async)");
        }
        
        
        com.squareup.okhttp.Call call = postAllocateModelCall(userUuid, initialAllocationModel, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Allows to post file allocate strategy from client to server.
     * @param userUuid User UUID. (required)
     * @param initialAllocationModel File allocation strategy. (required)
     * @return Vufs
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Vufs postAllocateModel(String userUuid, InitialAllocationModel initialAllocationModel) throws ApiException {
        ApiResponse<Vufs> resp = postAllocateModelWithHttpInfo(userUuid, initialAllocationModel);
        LOGGER.info("Method {postAllocateModel} was called, response code is {}", resp.getStatusCode());
        return resp.getData();
    }

    /**
     * 
     * Allows to post file allocate strategy from client to server.
     * @param userUuid User UUID. (required)
     * @param initialAllocationModel File allocation strategy. (required)
     * @return ApiResponse&lt;Vufs&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Vufs> postAllocateModelWithHttpInfo(String userUuid, InitialAllocationModel initialAllocationModel) throws ApiException {
        com.squareup.okhttp.Call call = postAllocateModelValidateBeforeCall(userUuid, initialAllocationModel, null, null);
        Type localVarReturnType = new TypeToken<Vufs>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Allows to post file allocate strategy from client to server.
     * @param userUuid User UUID. (required)
     * @param initialAllocationModel File allocation strategy. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postAllocateModelAsync(String userUuid, InitialAllocationModel initialAllocationModel, final ApiCallback<Vufs> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postAllocateModelValidateBeforeCall(userUuid, initialAllocationModel, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Vufs>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for postCloudStatSet */
    private com.squareup.okhttp.Call postCloudStatSetCall(String userUuid, StatisticSet cloudStatisticSet, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = cloudStatisticSet;
        
        // create path and map variables
        String localVarPath = "/stat/vufs/{userUuid}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "userUuid" + "\\}", apiClient.escapeString(userUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postCloudStatSetValidateBeforeCall(String userUuid, StatisticSet cloudStatisticSet, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'userUuid' is set
        if (userUuid == null) {
            throw new ApiException("Missing the required parameter 'userUuid' when calling postCloudStatSet(Async)");
        }
        
        // verify the required parameter 'cloudStatisticSet' is set
        if (cloudStatisticSet == null) {
            throw new ApiException("Missing the required parameter 'cloudStatisticSet' when calling postCloudStatSet(Async)");
        }
        
        
        com.squareup.okhttp.Call call = postCloudStatSetCall(userUuid, cloudStatisticSet, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Allows to post statistic from client to server about clouds.
     * @param userUuid User UUID. (required)
     * @param cloudStatisticSet Cloud statistic set typed object. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void postCloudStatSet(String userUuid, StatisticSet cloudStatisticSet) throws ApiException {
        postCloudStatSetWithHttpInfo(userUuid, cloudStatisticSet);
    }

    /**
     * 
     * Allows to post statistic from client to server about clouds.
     * @param userUuid User UUID. (required)
     * @param cloudStatisticSet Cloud statistic set typed object. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> postCloudStatSetWithHttpInfo(String userUuid, StatisticSet cloudStatisticSet) throws ApiException {
        com.squareup.okhttp.Call call = postCloudStatSetValidateBeforeCall(userUuid, cloudStatisticSet, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Allows to post statistic from client to server about clouds.
     * @param userUuid User UUID. (required)
     * @param cloudStatisticSet Cloud statistic set typed object. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postCloudStatSetAsync(String userUuid, StatisticSet cloudStatisticSet, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postCloudStatSetValidateBeforeCall(userUuid, cloudStatisticSet, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for sendChangesInLFS */
    private com.squareup.okhttp.Call sendChangesInLFSCall(Vufs localChanges, String userUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = localChanges;
        
        // create path and map variables
        String localVarPath = "/vufs/snap/diff/{userUuid}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "userUuid" + "\\}", apiClient.escapeString(userUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call sendChangesInLFSValidateBeforeCall(Vufs localChanges, String userUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'localChanges' is set
        if (localChanges == null) {
            throw new ApiException("Missing the required parameter 'localChanges' when calling sendChangesInLFS(Async)");
        }
        
        // verify the required parameter 'userUuid' is set
        if (userUuid == null) {
            throw new ApiException("Missing the required parameter 'userUuid' when calling sendChangesInLFS(Async)");
        }
        
        
        com.squareup.okhttp.Call call = sendChangesInLFSCall(localChanges, userUuid, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Allows to send changes in local file storage to server with empty Allocation model and as response get Vufs object with Allocation model.
     * @param localChanges VUFS snapshot typed object with changed in local file storage with empty Allocation model. (required)
     * @param userUuid Current user UUID. (required)
     * @return Vufs
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Vufs sendChangesInLFS(Vufs localChanges, String userUuid) throws ApiException {
        ApiResponse<Vufs> resp = sendChangesInLFSWithHttpInfo(localChanges, userUuid);
        LOGGER.info("Method {sendChangesInLFS} was called, response code is {}", resp.getStatusCode());
        return resp.getData();
    }

    /**
     * 
     * Allows to send changes in local file storage to server with empty Allocation model and as response get Vufs object with Allocation model.
     * @param localChanges VUFS snapshot typed object with changed in local file storage with empty Allocation model. (required)
     * @param userUuid Current user UUID. (required)
     * @return ApiResponse&lt;Vufs&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Vufs> sendChangesInLFSWithHttpInfo(Vufs localChanges, String userUuid) throws ApiException {
        com.squareup.okhttp.Call call = sendChangesInLFSValidateBeforeCall(localChanges, userUuid, null, null);
        Type localVarReturnType = new TypeToken<Vufs>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Allows to send changes in local file storage to server with empty Allocation model and as response get Vufs object with Allocation model.
     * @param localChanges VUFS snapshot typed object with changed in local file storage with empty Allocation model. (required)
     * @param userUuid Current user UUID. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call sendChangesInLFSAsync(Vufs localChanges, String userUuid, final ApiCallback<Vufs> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = sendChangesInLFSValidateBeforeCall(localChanges, userUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Vufs>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
